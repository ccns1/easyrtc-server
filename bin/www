#!/usr/bin/nodejs
//var debug = require('debug')('my-application');
// Main server application variables
let app = require('../app'),
    fs = require('fs'),
    http = require('http'),
    https = require('https'),
    privateKey = fs.readFileSync('key.pem', 'utf8'),
    certificate = fs.readFileSync('cert.pem', 'utf8'),
    credentials = {
        key: privateKey,
        cert: certificate
    },
    socketIo = require('socket.io');
var easyrtc = require('../');
    
// Create http & https servers
let httpServer = http.createServer(app),
    httpsServer = https.createServer(credentials, app);

// Start socket.io so it attaches itself to Express server
let socketServer = socketIo.listen(httpsServer, {'log level': 1});

// Overriding the defaukt easyAuth listener, only so we can directly access its callback
easyrtc.events.on('easyrtcAuth', function(socket, easyrtcid, msg, socketCallback, callback) {
        easyrtc.events.defaultListeners.easyrtcAuth(socket, easyrtcid, msg, socketCallback, function(err, connectionObj) {
                if(err || !msg.Data || !msgData.credential || !connectionObj) {
                    callback(err, connectionObj);
                    return;
                }
                
                connectionObj.setField('credential', msg.msgData.credential, {'isShared': false});
                
                console.log('['+easyrtcid+'] Credential saved!', connectionObj.getFieldValueSync('credential'));
                
                callback(err, connectionObj);
            });
    });
// To test, lets print the credential to the console for every room join!
easyrtc.events.on("roomJoin", function(connectionObj, roomName, roomParameter, callback) {
    console.log("["+connectionObj.getEasyrtcid()+"] Credential retrieved!", connectionObj.getFieldValueSync("credential"));
    easyrtc.events.defaultListeners.roomJoin(connectionObj, roomName, roomParameter, callback);
});
// Start EasyRTC server
let rtc = easyrtc.listen(app, socketServer, null, function(err, rtcRef) {
    console.log("Initiated");

    rtcRef.events.on("roomCreate", function(appObj, creatorConnectionObj, roomName, roomOptions, callback) {
        console.log("roomCreate fired! Trying to create: " + roomName);

        appObj.events.defaultListeners.roomCreate(appObj, creatorConnectionObj, roomName, roomOptions, callback);
    });
});
// Listen http & https servers on different ports
httpServer.listen(3000, '10.0.46.83', function() {
        console.log('listening on http://10.0.46.83:3000');
    });
httpsServer.listen(8080, '10.0.46.83',function() {
        console.log('listeninf on https://10.0.46.83:8080')
    });

//app.set('port', process.env.PORT || 3000);

//var server = app.listen(app.get('port'), function() {
//  debug('Express server listening on port ' + server.address().port);
//});